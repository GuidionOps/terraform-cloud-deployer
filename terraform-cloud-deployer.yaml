# Wish I read this first ;)
# https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#multi-environment-deployment

version: 2.1
description: Use terraform-cloud-deployer to create a run on Terraform Cloud

# https://circleci.com/docs/configuration-reference/

commands:
  # Terraform CLI Commands

  tf-init:
    description: Run terraform plan
    parameters:
      workspace:
        type: string
      tfc_api_token:
        type: string
    steps:
      - checkout
      - run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=<<parameters.tfc_api_token>> TF_WORKSPACE=<<parameters.workspace>> terraform init

  tf-plan:
    description: Run terraform plan
    parameters:
      workspace:
        type: string
      tfc_api_token:
        type: string
    steps:
      - run: |
          TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=<<parameters.tfc_api_token>> TF_WORKSPACE=<<parameters.workspace>> terraform plan
          echo "WARNING: This is a speculative plan. It may not reflect what you see when running terraform apply"

  approve-plan:
    description: "Please check the speculative plan in the previous step"
    parameters:
      workspace:
        type: string
      slack_channel:
        type: string
      slack_access_token:
        type: string
      ci_url:
        type: string
    steps:
      - run: tfcd -t FIXME -w <<parameters.workspace>> communication send -s <<parameters.slack_channel>> -t <<parameters.slack_access_token>> --run-url <<parameters.ci_url>>

  tf-apply:
    description: Run terraform apply
    parameters:
      workspace:
        type: string
      tfc_api_token:
        type: string
    steps:
      - run: TF_IN_AUTOMATION=true TF_TOKEN_app_terraform_io=<<parameters.tfc_api_token>> TF_WORKSPACE=<<parameters.workspace>> terraform apply -auto-approve

  # TFCD Commands

  create-configuration:
    description: Create a TFC configuration from repository contents
    parameters:
      workspace:
        type: string
      code_directory:
        type: string
      tfc_api_token:
        type: string
    steps:
      - checkout
      - run: tfcd -t <<parameters.tfc_api_token>> -w <<parameters.workspace>> configuration create -c <<parameters.code_directory>> | tee configuration_id

  create-run:
    description: Create and queue a run on TFC
    parameters:
      workspace:
        type: string
      tfc_api_token:
        type: string
    steps:
      - run: tfcd -t <<parameters.tfc_api_token>> -w <<parameters.workspace>> run queue -c $(cat configuration_id) | tee run_output

  cancel:
    description: Cancel the current run
    parameters:
      workspace:
        type: string
      tfc_api_token:
        type: string
    steps:
      - run: tfcd -t <<parameters.tfc_api_token>> -w <<parameters.workspace>> run cancel --auto-approve current

  send-message:
    description: Send messages about pending runs
    parameters:
      workspace:
        type: string
      slack_channel:
        type: string
      slack_access_token:
        type: string
    steps:
      - run: cat run_output
      - run: tfcd -t FIXME -w <<parameters.workspace>> communication send -s <<parameters.slack_channel>> -t <<parameters.slack_access_token>> --run-url $(cat run_output | jq -r .run_url)

jobs:
  # Using tfcd (API)
  cancel:
    description: Cancel the current run
    docker:
      - image: ghcr.io/guidionops/terraform-cloud-deployer:0.0.18
    parameters:
      tfc_api_token:
        type: string
      workspace:
        type: string
    steps:
      - cancel:
          tfc_api_token: <<parameters.tfc_api_token>>
          workspace: <<parameters.workspace>>

  deploy:
    description: Use the Terraform Cloud API to queue a run
    docker:
      - image: ghcr.io/guidionops/terraform-cloud-deployer:0.0.18
    parameters:
      tfc_api_token:
        type: string
      workspace:
        type: string
      code_directory:
        type: string
      slack_channel:
        type: string
      slack_access_token:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - create-configuration:
          tfc_api_token: <<parameters.tfc_api_token>>
          workspace: <<parameters.workspace>>
          code_directory: <<parameters.code_directory>>
      - create-run:
          tfc_api_token: <<parameters.tfc_api_token>>
          workspace: <<parameters.workspace>>
      - send-message:
          workspace: <<parameters.workspace>>
          slack_channel: <<parameters.slack_channel>>
          slack_access_token: <<parameters.slack_access_token>>

  # Using the Terrafomr CLI commands
  plan-tf-cli:
    description: "Return a speculative Terraform plan"
    docker:
      - image: ghcr.io/guidionops/terraform-cloud-deployer:0.0.18
    parameters:
      tfc_api_token:
        type: string
      workspace:
        type: string
      slack_channel:
        type: string
      slack_access_token:
        type: string
      ci_url:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - tf-init:
          tfc_api_token: <<parameters.tfc_api_token>>
          workspace: <<parameters.workspace>>
      - tf-plan:
          tfc_api_token: <<parameters.tfc_api_token>>
          workspace: <<parameters.workspace>>
      - approve-plan:
          workspace: <<parameters.workspace>>
          slack_channel: <<parameters.slack_channel>>
          slack_access_token: <<parameters.slack_access_token>>
          ci_url: <<parameters.ci_url>>

  deploy-tf-cli:
    description: "Queue a Terraform run without asking for approval"
    docker:
      - image: hashicorp/terraform:1.3.7
    parameters:
      tfc_api_token:
        type: string
      workspace:
        type: string
    steps:
      - attach_workspace:
          at: ~/project
      - tf-init:
          tfc_api_token: <<parameters.tfc_api_token>>
          workspace: <<parameters.workspace>>
      - tf-apply:
          tfc_api_token: <<parameters.tfc_api_token>>
          workspace: <<parameters.workspace>>
